const burgerMenu=document.querySelector(".header__burger"),navNode=document.querySelector(".header__menu"),pageBody=document.querySelector(".page__body");function toggleMenu(){navNode.classList.toggle("header__menu-open"),burgerMenu.classList.toggle("header__burger--open");var e=navNode.className.includes("header__menu-open");pageBody.style.overflow=e?"hidden":"auto"}function closeMenu(){burgerMenu.classList.remove("header__burger--open"),navNode.classList.remove("nav__open"),navList.classList.remove("nav__list-open"),pageBody.style.overflow="auto"}burgerMenu.addEventListener("click",toggleMenu);const swiper2=new Swiper("#swiper-2",{direction:"horizontal",loop:!0,navigation:{nextEl:".swiper-button-next",prevEl:".swiper-button-prev"},breakpoints:{768:{slidesPerView:2,spaceBetween:20},1440:{slidesPerView:4,spaceBetween:40}}}),swiper3=new Swiper("#swiper-3",{direction:"horizontal",loop:!0,navigation:{nextEl:".swiper-button-next",prevEl:".swiper-button-prev"},breakpoints:{768:{slidesPerView:3,spaceBetween:20},1440:{slidesPerView:4,spaceBetween:40}}});function send(e,n){e.preventDefault?e.preventDefault():e.returnValue=!1;var t=new XMLHttpRequest;t.open("POST",n,!0),t.onload=function(){200<=t.status&&t.status<400?"success"==(json=JSON.parse(this.response)).result&&e.target.reset():alert("Ошибка сервера. Номер: "+t.status)},t.onerror=function(){alert("Ошибка отправки запроса")},t.send(new FormData(e.target))}const persentsNode=document.querySelector(".preload__icon-number"),preloadNode=document.querySelector(".preload");document.addEventListener("DOMContentLoaded",()=>{preloadNode.classList.add("preload--none"),console.log("Загрузилось")});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,